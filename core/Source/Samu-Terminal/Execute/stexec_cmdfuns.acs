
function void StExecute_CMDBtnDesc(int lbl_title, int lbl_desc, int btndata){
	str name = CMDBut_getName(btndata);
	str desc = CMDBut_getDesc(btndata);
	int price = CMDBut_getPrice(btndata);
	bool acess = CMDBut_getAccessCond(btndata);
	//log(s:name);
	if(price > 0) name = strParam(s:name, s:" - ", d:price, s:" $.");
	if(!acess) name = strParam(s:name, s:" - Locked.");
	
	if(!CMDBut_getAccessCond(btndata)){
		Label_SetText(lbl_desc, CMDBut_getNoAccessReason(btndata));
		Label_setColor(lbl_title, CR_BRICK);
	}else{
		Label_SetText(lbl_desc, desc);
		if(price != 0)
			Label_setColor(lbl_title, cond(getTeamCredits() >= price, CR_YELLOW, CR_ORANGE));
		else Label_setColor(lbl_title, CR_GREEN);
	}
	
	Label_SetText(lbl_title, name);
	
}

function void STExecute_CMDExecute(int command, int arg, int btndata){
	str scriptname; 
	int ignore = 	CMDBut_getIgnorePrice(btndata);
	int cost = 		CMDBut_getPrice(btndata);
	
	if(!ignore)	sf_RemoveTeamCredits(cost);
	switch(command){
		case 1: scriptname = "SFPlus_CMD_CallBuildScript"; break;
		case 2: scriptname = "SFPlus_CMD_CallUpgradeScript"; break;
		case 3: scriptname = "SFPlus_CMD_CallSpawnScript"; break;
		case 4: scriptname = "SFPlus_CMD_CallMarkScript"; break;
		case 5: scriptname = "SFPlus_CMD_CallSupportScript"; break;
	}
	ACS_NamedExecute(scriptname, 0, arg, cost);
}

function void STExecute_CMDExecuteF(int command, int arg){
	str scriptname; 
	switch(command){
		case 1: scriptname = "SFPlus_CMD_CallBuildScript"; break;
		case 2: scriptname = "SFPlus_CMD_CallUpgradeScript"; break;
		case 3: scriptname = "SFPlus_CMD_CallSpawnScript"; break;
		case 4: scriptname = "SFPlus_CMD_CallMarkScript"; break;
		case 5: scriptname = "SFPlus_CMD_CallSupportScript"; break;
	}
	ACS_NamedExecute(scriptname, 0, arg);
}

function void StExecute_CMDBuild(int which, int btndata){
	int cost = CMDBut_getPrice(btndata);
	
	if(CMDBut_GetAccessCond(btndata)){
		if(getTeamCredits() >= cost || CMDBut_GetIgnorePrice(btndata)){
			SamuTerm_CallOpExecute(STEXE_CMDEXECUTE, 1, which, btndata);
		}else Toaster_ShowToast("Insufficient funds to start building, Access Denied.", CR_RED);
	}
	else{
		Toaster_ShowToast("Requirements not met, Access Denied.", CR_RED);
	}
	
}

function void StExecute_CMDUpgrade(int which, int btndata){
	int cost = CMDBut_getPrice(btndata);
	
	if(CMDBut_GetAccessCond(btndata))
		if(getTeamCredits() >= cost || CMDBut_GetIgnorePrice(btndata)){
			SamuTerm_CallOpExecute(STEXE_CMDEXECUTE, 2, which, btndata);
		}else Toaster_ShowToast("Insufficient funds to start researching, Access Denied!.", CR_RED);
	else{
		Toaster_ShowToast("Requirements not met, Access Denied.", CR_RED);
	}
	
	
}

function void StExecute_CMDSupport_Mark(int which){
	ACS_NamedExecute("SFPlus_CMD_CallMarkScript", 0, which);
}

function void StExecute_CMDSpawn(int which, int btndata){
	int cost = CMDBut_getPrice(btndata);

	if(CMDBut_GetAccessCond(btndata)){
		//log(d:getTeamCredits(),s:" $, - ", d:cost, s:"$ = ", d:(getTeamCredits() - cost), s:", Ignore price? =" , d:CMDBut_GetIgnorePrice(btndata));
		if(getTeamCredits() >= cost || CMDBut_GetIgnorePrice(btndata)){
			SamuTerm_CallOpExecute(STEXE_CMDEXECUTE, 3, which, btndata);
			
		}else Toaster_ShowToast("Insufficient funds for deploying, Access Denied!.", CR_RED);
	}else{
		Toaster_ShowToast("Requirements not met, Access Denied.", CR_RED);
	}
}

function void StExecute_CMDSupport(int which, int btndata){
	int cost = CMDBut_getPrice(btndata);

	if(CMDBut_GetAccessCond(btndata)){
		if(getTeamCredits() >= cost || CMDBut_GetIgnorePrice(btndata)){
			SamuTerm_CallOpExecute(STEXE_CMDEXECUTE, 5, which, btndata);
		}else Toaster_ShowToast("Insufficient funds for deploying, Access Denied!.", CR_RED);
	}else{
		Toaster_ShowToast("Requirements not met, Access Denied.", CR_RED);
	}
}

function void STExecute_CMDGotToCat(int tagdest, int btndata){

	if(!CMDBut_GetAccessCond(btndata))
		Toaster_ShowToast("Requirements not met, Access Denied.", CR_RED);
	else{
		pagetags[STTAGS_LAST] = pagetags[STTAGS_NOW];
		pagetags[STTAGS_NOW] = tagdest;
	}
}

function void STExecute_CMDExit(void){
	c_Commander = 99;
	ACS_NamedExecute("SFPlus_CMD_CallSupportScript", 0, 304); // Remove the left over markers from the air support.
	SamuTerm_Execute(STEXE_CLOSE, 0,0,0);
}

function void STExecute_CMDGoToCatExe(int tagdest, int execute){
	SamuTerm_Execute(execute, 0,0,0);
	pagetags[STTAGS_LAST] = pagetags[STTAGS_NOW];
	pagetags[STTAGS_NOW] = tagdest;
}
