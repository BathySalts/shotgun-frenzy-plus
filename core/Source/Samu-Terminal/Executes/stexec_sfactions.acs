
function void StExecute_BuyMechTank(void){
	if(GetPlayCredits() < CheckInventory("Mech_Buy")){
		Toaster_ShowToast("Not enough credits!",CR_RED);
	}else{
		Toaster_ShowToast("The War Mech is your's to drive!",CR_GREEN);
		SamuTerm_CallOpExecute(STEXE_GetMechTank, 0, 0, 0);
	}
}

function void STExecute_GetMechTank(void){
	sf_RemoveCredits(CheckInventory("Mech_Buy"), PlayerNumber());
	
	SetActivatorToPlayer(PlayerNumber());
	p_TankSlot[playernumber()] = 1;
	Acs_ExecuteAlways(305, 0);
}

function void STExecute_EnterMechTank(void){
	SetActivatorToPlayer(PlayerNumber());
	Acs_ExecuteAlways(306, 0);
	STExecute_Close();
}

function void STExecute_UpgradeMech(int which){
	int name = getMechUpName(which);
	int actor = getMechUpActor(which);
	int price = getMechUpPrice(which);
	
	if(CheckInventory("Mech_State") == 99) {
		Toaster_ShowToast("You can't upgrade what its broken!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
		return;
		}
	
	if(GetPlayCredits() < price){
		Toaster_ShowToast("Not enough credits!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}
	else{
		tmp[5] = which + 1;
		if(tmp[5] != tmp[6]) 
			Toaster_ShowToast(stradd(stradd("Sure to apply the ", name), "?"),CR_ORANGE);
		else{
			localambientsound("vehicle/mechupgrade",128);
			Toaster_ShowToast(stradd(name," Installed! (click for more)"),CR_GREEN);
			SamuTerm_CallOpExecute(STEXE_GETMECHUPG, which, 0, 0);
		}
		
		tmp[6] = tmp[5];
	}
}

function void STExecute_GetMechUpgrade(int which){
	str actor = getMechUpActor(which);
	int payprice = getMechUpPrice(which);
	
	
	sf_RemoveCredits(payprice, PlayerNumber());
	
	SetActivatorToPlayer(PlayerNumber());
	GiveInventory(actor, 1);
	ACS_NamedExecuteAlways("AnnounceMechUpgrade", 0, which);
}






function void StExecute_BuyPowerup(int which){
	int name = getItemName(which);
	int price = getItemPrice(which);
	int actor = getItemActor(which);
	int maxamount = getItemMax(which);
	
	if(GetPlayCredits() < price){
		Toaster_ShowToast("Not enough credits!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}else if(CheckInventory(actor) == maxamount){
		Toaster_ShowToast(stradd(stradd("You can't carry more ", name), "s!"), CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}
	else{
		tmp[5] = which + 1;
		if(tmp[5] != tmp[6]) 
			Toaster_ShowToast(stradd(stradd("Sure to buy a(n) ", name), "?"),CR_ORANGE);
		else{
			LocalAmbientSound("p/heal",128);
			Toaster_ShowToast(stradd(name," Pursached! Click for more!"),CR_GREEN);
			SamuTerm_CallOpExecute(STEXE_ItemGet, which, 0, 0);
		}
		
		tmp[6] = tmp[5];
	}
}

function void StExecute_BuyItem(int which){
	int name = getItemName(which);
	int price = getItemPrice(which);
	int actor = getItemActor(which);
	int maxamount = getItemMax(which);
	
	if(GetPlayCredits() < price){
		Toaster_ShowToast("Not enough credits!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}else if(CheckInventory(actor) == maxamount){
		Toaster_ShowToast("You can't carry more of this!",CR_RED);
		localAmbientSound("SamuTerm/Error",127);
	}
	else{
		tmp[5] = which + 1;
		if(tmp[5] != tmp[6]) 
			Toaster_ShowToast(stradd(stradd("Sure to buy a(n) ", name), "?"),CR_ORANGE);
		else{
			LocalAmbientSound("p/upgrade",128);
			Toaster_ShowToast(StrParam(s:name, s:" Pursached! Click for more!"),CR_GREEN);
			SamuTerm_CallOpExecute(STEXE_ItemGet, which, 0, 0);
		}
		
		tmp[6] = tmp[5];
	}
}

function void STExecute_GetItem(int which){
	int payprice = getItemPrice(which);
	int actor = getItemActor(which);
	sf_RemoveCredits(payprice, PlayerNumber());
	
	SetActivatorToPlayer(PlayerNumber());
	GiveInventory(actor, 1);
}


function void STExecute_lupnextPage(void){
/*
	listup_nav[2]++;
	if(listup_nav[2] > listup_nav[3]){
		listup_nav[2] = 0;
	}
	*/
}

function void STExecute_lupprevPage(void){
	/*listup_nav[2]--;
	if(listup_nav[2] < 0){
		listup_nav[2] = listup_nav[3];
	}*/
}