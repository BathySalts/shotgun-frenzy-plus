
int rcywp_comp[20][2][3];
int rcywp_caps[20][2];
int rcywp_gpos[20][2];
int rcywp_stack[20];
int rcywp_top;

function void UpdateRcyPage(int pageTag){
	setPageTitle(pageTag, "Recycle Weapons", CR_RED);
	if(isOnTheSamePage(pageTag)){
		RecyclePage_showRecycleOptions(WEP_SSG);
		RecyclePage_showRecycleOptions(WEP_QUADSHOT);
		RecyclePage_showRecycleOptions(WEP_SPITTER);
		RecyclePage_showRecycleOptions(WEP_BUCKSHOT);
		RecyclePage_showRecycleOptions(WEP_SUPPLIER);
		RecyclePage_showRecycleOptions(WEP_REPEATER);
		RecyclePage_showRecycleOptions(WEP_DUALSHOT);
		RecyclePage_showRecycleOptions(WEP_LAUNCHER);
		RecyclePage_showRecycleOptions(WEP_FLINGER);
		RecyclePage_showRecycleOptions(WEP_PLASMAGUN);
		RecyclePage_showRecycleOptions(WEP_RAILGUN);
		RecyclePage_showRecycleOptions(WEP_FLAMER);
		RecyclePage_showRecycleOptions(WEP_BFG);
		
		rcywp_top = 0;
	}
	else RecyclePage_Purge();
}


function void InitRcyPage(int pageTag){
	int x = 40.0;
	int y = 50.0;
	int stepy = 35.0;
	rcywp_top = 0;
	
	RecyclePage_InitGrid(x, y);
	
	pcolor = CR_GREEN;
	RecyclePage_addRecycleOption(pagetag, WEP_SSG, "S. Shotgun");
	RecyclePage_addRecycleOption(pagetag, WEP_QUADSHOT, "QuadShot");
	RecyclePage_addRecycleOption(pagetag, WEP_SPITTER, "Spitter");
	RecyclePage_addRecycleOption(pagetag, WEP_BUCKSHOT, "Buckshot");
	RecyclePage_addRecycleOption(pagetag, WEP_SUPPLIER, "Supplier");
	
	pcolor = CR_CYAN;
	RecyclePage_addRecycleOption(pagetag, WEP_REPEATER, "Repeater");
	RecyclePage_addRecycleOption(pagetag, WEP_DUALSHOT, "Dualshot");
	RecyclePage_addRecycleOption(pagetag, WEP_LAUNCHER, "Launcher");
	RecyclePage_addRecycleOption(pagetag, WEP_FLINGER, "Flinger");
	RecyclePage_addRecycleOption(pagetag, WEP_PLASMAGUN, "Plasma gun");
	RecyclePage_addRecycleOption(pagetag, WEP_RAILGUN, "Railgun");
	
	pcolor = CR_ORANGE;
	RecyclePage_addRecycleOption(pagetag, WEP_FLAMER, "Flamer");
	RecyclePage_addRecycleOption(pagetag, WEP_BFG, "BFG 9000");
}

function void RecyclePage_InitGrid(int x, int y){
	int stepy = 35.0;
	int gx, gy;
	int count = 0;
	while(count < 20){
		gx = x;
		gy = y + stepY * count;
		if(count >= 10){
			gx = 300.0 + x;
			gy = y + stepY * (count-10);
		}
		rcywp_gpos[count][0] = gx;
		rcywp_gpos[count][1] = gy;
		
		//log(d:count, s:")Grid Pos x: ", f:rcywp_gpos[count][0],s:" y: ", f:rcywp_gpos[count][1]);
		
		count++;
	}
}

function void RecyclePage_AddRecycleOption(int pagetag, int slot, str weapon){
	int i = 0;
	
	int x = rcywp_gpos[rcywp_top][0];
	int y = rcywp_gpos[rcywp_top][1];
	
	rcywp_caps[slot][0] = 0;
	rcywp_caps[slot][1] = 0;
	
	i = Label_Add(x,y + 4.0); 
	Label_setText(i, weapon);
	Label_setFont(i,"StatBigs");
	Label_setShow(i, false);
	Label_setAligns(i, HUD_ALIGN_LEFT, HUD_ALIGN_TOP);
	Label_setColor(i, pcolor);
	Label_setTag(i, pageTag);
	RecyclePage_Allocate(slot, 0, i);
	
	i = Label_Add(x,y + 20.0); 
	Label_setText(i,"Upgrade here");
	Label_setFont(i,"confont");
	Label_setAligns(i, HUD_ALIGN_LEFT, HUD_ALIGN_TOP);
	Label_setShow(i, false);
	Label_setColor(i, pcolor);
	Label_setTag(i, pageTag);
	RecyclePage_Allocate(slot, 0, i);
	
	i = StrButton_Add(x+150.0,y-2.0, "Recycle"); 
	setStrButtonShow(i, false);
	setStrButtonColor(i, pcolor);
	setStrButtonTag(i, pageTag);
	setStrButtonExecute(i, STEXE_ASKRC);
	setStrButtonExeArgs(i, slot, 0, 0);
	RecyclePage_Allocate(slot, 1, i);
	
	
	i = Label_Add(x+204.0,y + 20.0); 
	Label_setText(i,"Sell Price");
	Label_setFont(i,"confont");
	Label_setAligns(i, HUD_ALIGN_CENTER, HUD_ALIGN_TOP);
	Label_setShow(i, false);
	Label_setColor(i, pcolor);
	Label_setTag(i, pageTag);
	RecyclePage_Allocate(slot, 0, i);
}

function void RecyclePage_Allocate(int slot, int compType, int c){
	int toppy = rcywp_caps[slot][compType];
	
	rcywp_comp[slot][compType][toppy] = c;
	
	rcywp_caps[slot][compType] ++;
}

function void RecyclePage_Purge(void){
	if(rcywp_caps[0][0] != 0) // for eficiency stuff.
	for(int i = 0; i < 20; i++){
		Label_setShow(rcywp_comp[i][0][0], false);
		Label_setShow(rcywp_comp[i][0][1], false);
		Label_setShow(rcywp_comp[i][0][2], false);
		setStrButtonShow(rcywp_comp[i][1][0], false);
		rcywp_caps[i][0] = 0;
		rcywp_caps[i][1] = 0;
		rcywp_comp[i][0][0] = 0;
		rcywp_comp[i][0][1] = 0;
		rcywp_comp[i][0][2] = 0;
		rcywp_comp[i][1][0] = 0;
		rcywp_stack[i] = 0;
		
		
	}
}

function void RecyclePage_showRecycleOptions(int slot){
	int i;
	int result = GotWeaponSameKind(slot);
	int price = WeaponRecyclePrice(slot);
	int upgrade = WeaponLastUpgradeType(slot);
	int cost2 = getWeaponUP2Cost(slot); // To check if this is a single upgrade weapon.
		if(rcywp_top < 20){
			rcywp_stack[rcywp_top] = slot;
			
			for(i = 0; i < rcywp_caps[slot][0]; i++){
				int lposx = rcywp_gpos[rcywp_top][0];
				int lposy = rcywp_gpos[rcywp_top][1];
				int lbl = rcywp_comp[slot][0][i];
				if(i == 0){ // Title Label
					Label_setPosition(lbl, lposX, lposY + 4.0);
				}
				
				else if(i == 1){ // Upgrade label.
					Label_setPosition(lbl, lposX, lposY + 20.0);
					if(upgrade == 0){
						Label_setText(lbl,"Not upgraded.");
					}else{
						if(cost2 <= 0){
							Label_setText(lbl,"Upgrade: Type 0.");
						}else{
							Label_setText(lbl,strParam(s:"Upgrade: Type ", d:upgrade));
						}
					}
				}
				
				else if(i == 2){
					Label_setPosition(lbl, lposX + 204.0, lposY + 20.0);
					Label_setText(lbl,strParam(s:"+ ", d:price));
				}
				Label_setShow(lbl, result);
			}
			
			int sbtn = rcywp_comp[slot][1][0];
			int sposx = rcywp_gpos[rcywp_top][0];
			int sposy = rcywp_gpos[rcywp_top][1];
				
			setStrButtonPosition(sbtn,  sposX + 150.0, sposY - 2.0);
			setStrButtonShow(sbtn, result);
				
			if(result)rcywp_top++;
		}
}