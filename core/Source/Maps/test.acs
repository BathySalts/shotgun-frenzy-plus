///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

//Testing map.
#library "TEST"

#import "f_IntDB.acs"
#import "f_Tip.acs"

#import "f_FinalF.acs"
#import "f_PMen.acs"
#import "f_PHUD.acs"
#import "f_Rank.acs"
#import "f_Cred.acs"
#import "f_PStat.acs"
#import "f_StokP.acs"
//#import "f_TaticalMap.acs"
#import "fl_techs.acs"

#include "zcommon.acs"

#include "samu_tools.ach"

#define List 100
str spawnerList[List];
int spawnselect = 0;
int spawnStack = 0;
int altars = 128;
bool wavelikespawn = false;
bool x4health = false;
int spawned;

script 100 Open{
	f_Gametype = 0;
	setupTerminals();
	f_Startcash =   2500;  
	
	addToSpawner("sfFastZombie");
	addToSpawner("ChainsawZombie");
	addToSpawner("sfZombieMan");
	addToSpawner("sfShotgunGuy");
	addToSpawner("sfChaingunGuy");
	
	addToSpawner("SegWayZombie");
	addToSpawner("SuicideBomber");
	addToSpawner("ChaingunGuy2");
	addToSpawner("SSGZombie");
	addToSpawner("NailBorg");
	addToSpawner("NailBorgCommando");
	addToSpawner("sfDoomImp");
	addToSpawner("SlimeImp");
	addToSpawner("VoidDarkImp");
	addToSpawner("NamiDarkImp");
	addToSpawner("sfDemon");
	addToSpawner("BloodDemonClone");
	addToSpawner("Bloodfiend");
	addToSpawner("StoneDemon");
	addToSpawner("sfRevenant");
	addToSpawner("Hellion");
	
	addToSpawner("Afrit");
	addToSpawner("sfHellKnight");
	addToSpawner("sfBaronOfHell");
	addToSpawner("Cyberbaron");
	addToSpawner("Cybruiser");
	addToSpawner("HellsFury");
	
	addToSpawner("sfFatso");
	addToSpawner("FusionSpider");
	addToSpawner("sfArachnotron_tw");
	addToSpawner("Aracnorb");
	addToSpawner("ArchonOfHell");
	addToSpawner("sfArchvile");
	addToSpawner("sfCyberdemon");
	addToSpawner("Annihilator");
	addToSpawner("SpiderAnnihilator");
	addtospawner("Demolisher");
	addToSpawner("SFJuggernaught");
	
	SpawnSpot(spawnerList[spawnselect], 1,2,0);
	Thing_Deactivate(2);
	ACS_Execute(14,0);
}

script 14 (void){
	//Iterate list to spawn each monster in each altar.
	Print(s:"Setting up altars...");
	
	CreateTranslation(11, 0:255=0:255);
	int i;
	for(i = 0; i < spawnStack; i++){
		ACS_ExecuteAlways(13,0, i);
		delay(1);
	}
	
	for(i = spawnstack; i < altars; i++){
		ACS_ExecuteAlways(15,0, i);
		delay(1);
	}
	Print(s:"The monster spawner is now open!");
	Door_Open(5, 128);
}

script 17 (int modifier){
	
	str msg = "";
	if(modifier == 1){
		wavelikespawn = !wavelikespawn;
		msg = strParam(s:"Wave-Like Spawning: ", s:strBool(wavelikespawn));
		toggleIndicators(wavelikespawn, 10);
	} else if (modifier == 2){
		x4health = !x4health;
		msg = strParam(s:"Health Points x4: ", s:strBool(x4health));
		toggleIndicators(x4health, 11);
	}
	
	SetFont("Confont");
	HudMessage(s:msg; HUDMSG_FADEOUT, 2,  CR_WHITE, 0.5,0.75, 1.0, 0.5);
	
}

function void toggleIndicators(int cond, int lineid){
	if(cond)
		SetLineTexture(lineid, Side_FRONT, TEXTURE_BOTTOM, "N_CGRN01");
	else
		SetLineTexture(lineid, Side_FRONT, TEXTURE_BOTTOM, "N_CRED01");
}

function str strBool(bool cond){
	if(cond) return "true";
	return "false";
}

script 18 (int cmd){// Teleport commands.
	if(cmd == 1){ // Kill that sonofablitch
		Thing_Remove(1998);
		Thing_Remove(1898);
	}
	else if (cmd == 0){// I liked that, again!
		Thing_Remove(1998);
		Thing_Remove(1898);
		if(wavelikespawn){
			Spawnspot("TeleportFog", 1899, 1898, 0);
			Spawnspot(spawnerList[spawned], 1899, 1898, 0);
		}else{
			Spawnspot("TeleportFog", 1999, 1998, 0);
			Spawnspot(spawnerList[spawned], 1999, 1998, 0);
		}
		if(x4health){
		int health = getActorProperty(1998, APROP_Health);
		SetActorProperty(1998, APROP_HEALTH, health + health * 4);
		
		health = getActorProperty(1898, APROP_Health);
		SetActorProperty(1898, APROP_HEALTH, health + health * 4);
		}
		
		Thing_Hate(1998, 0, 0);
		Thing_Hate(1898, 0, 0);
	}
}

script 19 (int tlport){
	//Teleporter announce.
	switch(tlport){
		case 1: 
			f_TipShow("PLAYER", "", "Entered into the arena.", 10);
			Teleport(5, 0, 0);
			Thing_Hate(1998, 0, 0);
			Thing_Hate(1898, 0, 0);
		break;
		case 0:
			f_TipShow("PLAYER", "", "Left from the arena.", 10);
			Teleport(6, 0, 0);
		break;
	}
}

script 16 (int who){
	// Set the monster to be spawned.
	spawned = who;
	print(s:"I am from the: ", s:spawnerList[who], s:" Class.");
	Thing_Remove(1998);
	Thing_Remove(1898);
	if(wavelikespawn){
		Spawnspot("TeleportFog", 1899, 1898, 0);
		Spawnspot(spawnerList[who], 1899, 1898, 0);
	}else{
		Spawnspot("TeleportFog", 1999, 1998, 0);
		Spawnspot(spawnerList[who], 1999, 1998, 0);
	}
	if(x4health){
		int health = getActorProperty(1998, APROP_Health);
		SetActorProperty(1998, APROP_HEALTH, health + health * 4);
		
		health = getActorProperty(1898, APROP_Health);
		SetActorProperty(1898, APROP_HEALTH, health + health * 4);
	}
}

script 15 (int who){
	//If the altar is not used, hide it.
	changeFloor(300 + who,		"CEIL4_2");
	changeCeiling(300 + who,	"BRICK8_2");
	Floor_LowerToLowest(300 + who, 		128);
	Ceiling_RaiseToNearest(300 + who, 	128);
	
	ChangeFloor(600 + who, 		"CEIL4_2");
	ChangeCeiling(600 + who, 	"BRICK8_2");
}

script 13 (int who){
	//Spawn the monster in the altar and then, add a button to spawn it on the arena.
	SpawnSpot(spawnerList[who], 300 + who, 1300 + who, 0);
	Thing_DeActivate(1300 + who);
	//Activate buttons.
	SetLineSpecial(300 + who, 80, 16, 0, who);
	Thing_SetTranslation(1300 + who, TRANSLATION_ICE);
	//Raise altars
	Floor_RaiseByValue(300 + who, 64, 32);
	Ceiling_LowerByValue(300 + who, 64, 64);
	
	//Raise button
	Floor_RaiseByValue(600 + who, 64, 32);
}

script 10 (void){
	Thing_Activate(2);
}

script 12 (void){
	Thing_Remove(4);
	SpawnSpotFacing(spawnerList[spawnSelect], 3, 4);
	Thing_Hate(4,0,0);
}

script 11 (int dir){
	spawnselect += dir;
	if(spawnselect < 0) spawnselect = spawnstack-1;
	else if(spawnselect >= spawnstack) spawnselect = 0;
	Thing_Remove(2);
	SpawnSpot(spawnerList[spawnselect], 1,2,0);
	Thing_Deactivate(2);
	print(s:"Monster to spawn: ", s:spawnerList[spawnSelect]);
}

script 20 (int placeid){
	str msg = "";
	switch(placeid){
		case 0: msg = "Monster Spawner";
	}
	SetFont("STATBIGS");
	HudMessage(s:msg; HUDMSG_FADEOUT, 1,  CR_WHITE, 0.5,0.8, 2.0, 0.5);
}

function void addToSpawner(str who){
	if(spawnstack+1 > altars){
		print(s:"Can't make an altar for ", s:who, s:" there is no more space!");
	}
	else{
		spawnerList[spawnStack] = who;
		spawnstack++;
	}
}