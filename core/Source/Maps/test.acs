///////////////////////////////////////////////////
//      SHOTGUN FRENZY PLUS
//   a Shotgun Frenzy fork by Samuzero15tlh

//Testing map.
#library "TEST"

#import "f_IntDB.acs"
#import "f_Tip.acs"

#import "f_FinalF.acs"
#import "f_PMen.acs"
#import "f_PHUD.acs"
#import "f_Rank.acs"
#import "f_Cred.acs"
#import "f_PStat.acs"
#import "f_StokP.acs"
//#import "f_TaticalMap.acs"

#include "zcommon.acs"
#include "samu_tools.acs"

#define List 100
str spawnerList[List];
int spawnselect = 0;
int spawnStack = 0;
int altars = 64;

script 100 Open{
	f_Gametype = 0;
	setupTerminals();
	f_Startcash =   2500;  
	
	addToSpawner("Annihilator");
	addToSpawner("ArchonOfHell");
	addToSpawner("BloodDemonClone");
	addToSpawner("Bloodfiend");
	addToSpawner("ChaingunGuy2");
	addToSpawner("ChainsawZombie");
	addToSpawner("Cyberbaron");
	addToSpawner("Cybruiser");
	addToSpawner("Hellion");
	addToSpawner("NailBorg");
	addToSpawner("NailBorgCommando");
	addToSpawner("NamiDarkImp");
	addToSpawner("sfArachnotron_tw");
	addToSpawner("sfArchvile");
	addToSpawner("sfBaronOfHell");
	addToSpawner("sfChaingunGuy");
	addToSpawner("sfCyberdemon");
	addToSpawner("sfDemon");
	addToSpawner("sfDoomImp");
	addToSpawner("sfFastZombie");
	addToSpawner("sfFatso");
	addToSpawner("sfHellKnight");
	addToSpawner("sfRevenant");
	addToSpawner("sfShotgunGuy");
	addToSpawner("sfZombieMan");
	addToSpawner("SlimeImp");
	addToSpawner("SpiderAnnihilator");
	addToSpawner("SSGZombie");
	addToSpawner("StoneDemon");
	addToSpawner("VoidDarkImp");
	
	SpawnSpot(spawnerList[spawnselect], 1,2,0);
	Thing_Deactivate(2);
	ACS_Execute(14,0);
}

script 14 (void){
	//Iterate list to spawn each monster in each altar.
	Print(s:"Setting up altars...");
	int i;
	for(i = 0; i < spawnStack; i++){
		ACS_ExecuteAlways(13,0, i);
		delay(1);
	}
	
	for(i = spawnstack; i < altars; i++){
		ACS_ExecuteAlways(15,0, i);
		delay(1);
	}
	Print(s:"The monster spawner is now open!");
	Door_Open(5, 128);
}

script 16 (int who){
	//print(s:"Sup bitches.");
	print(s:"I am from the: ", s:spawnerList[who], s:" Class.");
	Thing_Remove(1998);
	Spawnspot(spawnerList[who], 1999, 1998, 0);
}

script 15 (int who){
	//If the altar is not used, hide it.
	changeFloor(301 + who,		"CEIL4_2");
	changeCeiling(301 + who,	"BRICK8_2");
	Floor_LowerToLowest(301 + who, 		128);
	Ceiling_RaiseToNearest(301 + who, 	128);
	
	ChangeFloor(601 + who, 		"CEIL4_2");
	ChangeCeiling(601 + who, 	"BRICK8_2");
}

script 13 (int who){
	//Spawn the monster in the altar and then, add a button to spawn it on the arena.
	SpawnSpot(spawnerList[who], 31 + who, 200 + who, 0);
	Thing_DeActivate(200 + who);
	//Activate buttons.
	SetLineSpecial(31 + who, 80, 16, 0, who);
	//Raise altars
	Floor_RaiseByValue(301 + who, 64, 32);
	Ceiling_LowerByValue(301 + who, 64, 64);
	
	//Raise button
	Floor_RaiseByValue(601 + who, 64, 32);
}

script 10 (void){
	Thing_Activate(2);
}

script 12 (void){
	Thing_Remove(4);
	SpawnSpotFacing(spawnerList[spawnSelect], 3, 4);
	Thing_Hate(4,0,0);
}

script 11 (int dir){
	spawnselect += dir;
	if(spawnselect < 0) spawnselect = spawnstack-1;
	else if(spawnselect >= spawnstack) spawnselect = 0;
	Thing_Remove(2);
	SpawnSpot(spawnerList[spawnselect], 1,2,0);
	Thing_Deactivate(2);
	print(s:"Monster to spawn: ", s:spawnerList[spawnSelect]);
}

script 20 (int placeid){
	str msg = "";
	switch(placeid){
		case 0: msg = "Monster Spawner";
	}
	SetFont("STATBIGS");
	HudMessage(s:msg; HUDMSG_FADEOUT, 1,  CR_WHITE, 0.5,0.8, 2.0, 0.5);
}

function void addToSpawner(str who){
	if(spawnstack+1 > altars){
		print(s:"Can't make an altar for ", s:who, s:" there is no more space!");
	}
	else{
		spawnerList[spawnStack] = who;
		spawnstack++;
	}
}