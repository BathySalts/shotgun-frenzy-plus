///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// fc_CommandButtons.acs
// script containing commander menu buttons
#library "fc_CommB"

// ************** CLIENTSIDE HUDMESSAGE SCRIPTS ************** 

#import "f_IntDB.acs"
#import "fl_Price.acs"
#import "f_Tip.acs"
#import "fl_techs.acs"
#include "zcommon.acs"
#include "samu_tools.ach"

//check if we're allowed to put turrets down again


//        if (l_TextID == 0)      hudmessage(s:"$", d:l_Price, s:" - ", s:l_Name; 1, 126, cr_gold, 50.1, 419.1, 15.0);

// ***********************************************************

script "SFPlus_CMD_CallBuildScript" (int which){
	CMDEvent (2, which, 0, 0);
}

script "SFPlus_CMD_CallUpgradeScript" (int which){
	CMDEvent (3, which, 0, 0);
}

script "SFPlus_CMD_CallMarkScript" (int which){
	CMDEvent (5, which, 0, 0);
}

script "SFPlus_CMD_CallSupportScript" (int which){
	int scriptcode;
	switch(which){
			case 1: //Point 1
				scriptcode = 301;		break;
			case 2: //Point 2
				scriptcode = 302;		break;
			case 3: //Cancel airstrike
				scriptcode = 303;		break;
				
			case 4: //Ion cannon.
				scriptcode = 304;		break;
				
			case 10: //Core pulses. (Heal)
				scriptcode = 404;		break;
			case 11: //Core pulses. (Cripple)
				scriptcode = 402;		break;
			case 12: //Core pulses. (Halt)
				scriptcode = 403;		break;
				
			case 66: // Nuke trigger. // Soch deth, soch destruction! -Martin-
				scriptcode = 451;		break;
			default: terminate;
		}
	CMDEvent(8, scriptcode, 0, 0);
	//fc_NewButton (4, 79, 8, 304, 0, 0, 79, 18, 12, "");
		
}

script "SFPlus_CMD_CallSpawnScript" (int which){
	str thing;
	int noSectorCheck = 0;
	
	if(which == 99){ // Money bag Execption.
		CMDEvent(9, 0, 0, 0);
	}else if (which > 0){
		switch(which){
			case 10: //Ammo dispenser
				thing = "Spawn_AmmoDispenser"; 		break;
			case 11:  //Health dispenser
				thing = "Spawn_HealthDispenser";	break;
			case 12:  //Sandbags
				thing = "Spawn_Sandbags";			break;
			case 13:  //Landmines.
				thing = "Spawn_Landmine";	
				noSectorCheck = 1;
				break;
			case 1: //Bullet turret
				thing = "Spawn_TurretBullet";		break;
			case 2: //Rocket turret
				thing = "Spawn_TurretRocket";		break;
			case 3: //Plasma turret
				thing = "Spawn_TurretPlasma";		break;
			case 4: //Tesla Coil
				thing = "Spawn_TurretTesla";		break;
			case 5: //Flame turret
				thing = "Spawn_TurretFlame";		break;
			case 6: //Chaingun turret
				thing = "Spawn_TurretChaingun";		break;
			default: terminate;
		}
		CMDEvent(4+noSectorCheck*3, thing, which, 0);
	}
}

// events system
function void CMDEvent (int l_Event, int l_EventArg1, int l_EventArg2, int l_EventArg3)
{
    // build a structure
    if (l_Event == 2)
    {
        // waiting time
        f_TipShow ("BUTTON", "", "", l_EventArg1 + 10);
        
		switch(l_EventArg1){
			case 1: Tech_Set(FP_TECH_GENLAB, FP_TECHF_LOCK); break;
			case 2: Tech_Set(FP_TECH_ARMORY, FP_TECHF_LOCK); break;
			case 3: Tech_Set(FP_TECH_MECHFA, FP_TECHF_LOCK); break;
			case 4: Tech_Set(FP_TECH_REFINE, FP_TECHF_LOCK); break;
			case 5: Tech_Set(FP_TECH_MARCOM, FP_TECHF_LOCK); break;
			case 6: Tech_Set(FP_TECH_NUKESY, FP_TECHF_LOCK); break;
		}
    }
    
    // research and change techflag
    if (l_Event == 3)
    {
        ambientsound("cv/researchcomplete", 125);
        
		switch(l_EventArg1){
			case 12:
				Tech_Set(FP_TECH_GENLAB_HEALTH1, FP_TECHF_DONE);
				f_TipShow ("CM12", "Human Engineering Phase 1", "Researched!", 1);
				acs_execute(617, 0, 11, 0, 0);
			break;
			
			case 13:
				Tech_Set(FP_TECH_GENLAB_HEALTH2, FP_TECHF_DONE);
				f_TipShow ("CM13", "Human Engineering Phase 2", "Researched!", 1);
				acs_execute(617, 0, 12, 0, 0);
			break;
			
			case 15:
				Tech_Set(FP_TECH_GENLAB_SPEEDB, FP_TECHF_DONE);
				f_TipShow ("CM15", "Adrenaline", "Researched!", 1);
				acs_execute(617, 0, 0, 0, 0);
			break;
			
			case 16:
				Tech_Set(FP_TECH_GENLAB_ARMOR, FP_TECHF_DONE);
				f_TipShow ("CM16", "Steel Plating", "Researched!", 1);
				acs_execute(617, 0, 1, 0, 0);
			break;
			
			case 17:
				Tech_Set(FP_TECH_GENLAB_RESISB, FP_TECHF_DONE);
				f_TipShow ("CM17", "Resister Unit", "Researched!", 1);
				acs_execute(617, 0, 2, 0, 0);
			break;
			
			case 18:
				Tech_Set(FP_TECH_GENLAB_REGENB, FP_TECHF_DONE);
				f_TipShow ("CM18", "Asorber Unit", "Researched!", 1);
				acs_execute(617, 0, 3, 0, 0);
			break;
			
			case 26:
				Tech_Set(FP_TECH_ARMORY_ARMS1, FP_TECHF_DONE);
				f_TipShow ("CM26", "Arms Phase 1", "Researched!", 1);
				acs_execute(617, 0, 4, 0, 0);
			break;
			
			case 27:
				Tech_Set(FP_TECH_ARMORY_ARMS2, FP_TECHF_DONE);
				f_TipShow ("CM27", "Arms Phase 2", "Researched!", 1);
				acs_execute(617, 0, 5, 0, 0);
			break;
			
			case 28:
				Tech_Set(FP_TECH_ARMORY_BOOMRN, FP_TECHF_DONE);
				f_TipShow ("CM28", "Boomshot Rounds", "Researched!", 1);
				acs_execute(617, 0, 6, 0, 0);
			break;
			
			case 29:
				Tech_Set(FP_TECH_ARMORY_AMMOBP, FP_TECHF_DONE);
				f_TipShow ("CM29", "Ammo Backpack", "Researched!", 1);
				acs_execute(617, 0, 7, 0, 0);
			break;
			
			case 44:
				Tech_Set(FP_TECH_MARCOM_ADVSYS, FP_TECHF_DONE);
				f_TipShow ("CM44", "Advanced Systems", "Researched!", 1);
			break;
			
			case 48:
				//[Samu] Looks like the drones we're meant to used by the commander too.
				//SetTechFlag(TECH_HEALT1);
				
				f_TipShow ("CM48", "Drone Tech", "Researched!", 1);
			break;
			
			case 53:
				Tech_Set(FP_TECH_MARCOM_IONCAN, FP_TECHF_DONE);
				f_TipShow ("CM53", "Ion Heat", "Researched!", 1);
			break;
			
			case 54:
				Tech_Set(FP_TECH_MARCOM_AIRSUP, FP_TECHF_DONE);
				f_TipShow ("CM54", "Air Support", "Researched!", 1);
			break;
			
			case 56:
				Tech_Set(FP_TECH_REFINE_PUMP1, FP_TECHF_DONE);
				f_TipShow ("CM56", "Processing Phase 1", "Researched!", 1);
			break;
			
			case 57:
				Tech_Set(FP_TECH_REFINE_PUMP2, FP_TECHF_DONE);
				f_TipShow ("CM57", "Processing Phase 2", "Researched!", 1);
			break;
			
			case 66: 
				//[Samu] Not used. Probably was there to give the players a rage rune for a short time.
				//SetTechFlag(TECH_HEALT1);
				Tech_Set(FP_TECH_MARCOM_CPULSE, FP_TECHF_DONE);
				f_TipShow ("CM66", "Core Pulses", "Researched!", 1);
			break;
			
			case 71:
				Tech_Set(FP_TECH_ARMORY_STIMPK, FP_TECHF_DONE);
				f_TipShow ("CM71", "Stimpacks", "Researched!", 1);
				acs_execute(617, 0, 8, 0, 0);
			break;
		}
    }
    
    // spawn an item requiring construction
    if (l_Event == 4) //arg1= thingstr, arg2 = msg id, arg3 = screw sector checking. 
    {

	// check current sector before placing
		if (getactory(130) < getactory(81) & g_Status == 1 | getactory(130) < getactory(82) & g_Status == 2 | getactory(130) < getactory(83) & g_Status == 3 | getactory(130) < getactory(84) & g_Status == 4){
			// add object
			setactorstate(130, l_EventArg1, 0);
			
			//[Samu] for lazyness sake, and for controlling turret - dispenser spawning.
			c_allow_turret = Timer();
			
			// show the message
			switch(l_EventArg2){
				case 10: f_TipShow ("CM32", "Ammo Dispenser", "Commander is building an Ammo Dispenser...", 2); break;
				case 11: f_TipShow ("CM33", "Health Dispenser", "Commander is building a Health Dispenser...", 2); break;
				case 12: f_TipShow ("CM33", "Sandbags", "Commander is building some sandbags...", 2); break;
				case 1: f_TipShow ("CM40", "Bullet Turret", "Commander is building a Bullet Turret...", 2); break;
				case 2: f_TipShow ("CM41", "Rocket Turret", "Commander is building a Rocket Turret...", 2); break;
				case 3: f_TipShow ("CM42", "Plasma Turret", "Commander is building a Plasma Turret...", 2); break;
				
				case 4: f_TipShow ("CM46", "Tesla Turret", "Commander is building a Tesla Turret...", 2); break;
				case 5: f_TipShow ("CM47", "Flame Turret", "Commander is building a Flame Turret...", 2); break;
				case 6: f_TipShow ("CM47", "Chaingun Turret", "Commander is building a Chaingun Turret...", 2); break;
				case 7: f_TipShow ("CM45", "Shotgun Turret", "Awaiting Construction...", 2); break;
				case 8: f_TipShow ("CM43", "Rail Turret", "Awaiting Construction...", 2); break;
			}   
		}
		else {
			if (getactory(130) > getactory(81)) {
				print(s:"Cannot place here...");
			}
			else {
				print(s: "This sector has been lost!\nCan only place this in sectors you have control of...");
			}
		}

		   
    }
    
    // place objective marker
    if (l_Event == 5)
    {
        switch(l_EventArg1)
        {
            case 1:
                f_TipShow("OBJECT1", "New Objective", "Attack marked position!", 0);
                thing_remove(143);
                setactorstate(130, "Spawn_Attack", 0);
                ambientsound("c/attack", 125);
            break;
            case 2:
                f_TipShow("OBJECT2", "New Objective", "Defend marked position!", 0);
                thing_remove(144);
                setactorstate(130, "Spawn_Defend", 0);
                ambientsound("c/defend", 125);
            break;
            case 3:
                f_TipShow("OBJECT3", "New Objective", "Structures requiring construction at marked position!", 0);
                thing_remove(145);
                setactorstate(130, "Spawn_Construct", 0);
                ambientsound("c/construct", 125);
            break;
            case 4:
                f_TipShow("OBJECT4", "New Objective", "Regroup at marked position!", 0);
                thing_remove(146);
                setactorstate(130, "Spawn_Regroup", 0);
                ambientsound("c/regroup", 125);
            break;
            case 5:
                // removes all markers
                thing_remove(143);
                thing_remove(144);
                thing_remove(145);
                thing_remove(146);
                f_TipShow("INFO", "Objective Markers", "All cleared...", 0);
            break;
        }
        
    }
    // basic spawn
    if (l_Event == 7)
    {
        // add object
        setactorstate(130, l_Eventarg1, 0);
        /*
        // add desired message
        if(l_PriceID == 30)        f_TipShow ("CM30", "Sandbags", "Placed!", 2);           // I know this is not in the right place, but it'll do for now
        if(l_PriceID == 31)        f_TipShow ("CM31", "Minefield", "Constructed! Mines currently priming...", 2);
		*/
		
		switch(l_EventArg2){
			case 13: f_TipShow ("CM30", "Minefield", "Commander deployed some mines, priming now....", 2); break;
		} 
    }
    
    // run a script
    if (l_Event == 8)
    {
        // run the script
        acs_execute(l_EventArg1, 0, l_EventArg2, l_EventArg3, 0);
    }
    
    // money bag spawn
    if (l_Event == 9)
    {
        setactorstate(130, "Spawn_MoneyBag", 0);
    }
}

