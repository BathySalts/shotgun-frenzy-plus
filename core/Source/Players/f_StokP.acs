///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_StokP.acs
// health and ammo stock pad setup

#library "f_StokP"

#import "f_IntDB.acs"
#import "fl_techs.acs"
#import "f_Tip.acs"

#include "zcommon.acs"
#include "acsutils.ach"
#include "samu_tools.ach"

int show_stack = 0;
int show_color = CR_WHITE;
// a player walks onto a stock pad
script 106 (int l_Type, int l_Give, int l_DisableFlash)
{//Healing and stocking pads
    // healing pad
	if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
	{
		Print(s:"You can't use these in a tank!");
		terminate;
	}
	
	show_stack = 0;
	show_color = CR_CYAN;
    if ((l_Type == 1 && Tech_IsDone(FP_TECH_GENLAB)) || (l_Type == 4))
    {
	
	// display what has been researched to the player
	
	
	
	if (Tech_IsDone(FP_TECH_GENLAB_HEALTH2)) {
		RemindUpgrade(true, "+ HUMAN GENETICS P2");
	}
	else if (Tech_IsDone(FP_TECH_GENLAB_HEALTH1)) {
		RemindUpgrade(true, "+ HUMAN GENETICS P1");
	}
	RemindUpgrade(Tech_IsDone(FP_TECH_GENLAB_SPEEDB), "+ Adrenaline");
	RemindUpgrade(Tech_IsDone(FP_TECH_GENLAB_ARMOR), "+ Steel Plating");
	RemindUpgrade(Tech_IsDone(FP_TECH_GENLAB_RESISB), "+ Resister Unit");
	RemindUpgrade(Tech_IsDone(FP_TECH_GENLAB_REGENB), "+ Absorber Unit");
	RemindUpgrade(
		CheckInventory("UnitUp_BodyEnhancement"), "+ Body Enhancement");
	RemindUpgrade(
		CheckInventory("UnitUp_ExpansiveRestock"), "+ Expansive Restock");
	RemindUpgrade(
		CheckInventory("UnitUp_ArmorRepair"), "+ Armor Repair");
	RemindUpgrade(
		CheckInventory("UnitUp_PowUpUpgrade"), "+ Powerup Upgrade");
	RemindUpgrade(
		CheckInventory("UnitUp_MechSync"), "+ MechaSync");
	RemindUpgrade(
		CheckInventory("UnitUp_SpawnShield"), "+ Spawn Shield");
	RemindUpgrade(
		CheckInventory("UnitUp_HealCoins"), "+ Healing Coins");
	RemindUpgrade(
		CheckInventory("UnitUp_Prometeo"), "+ Prometeo Protocol");
	RemindUpgrade(
		CheckInventory("UnitUp_RuneSync"), "+ RuneSync");

	int hp = getActorProperty(0, APROP_Health);


		if(p_TankSlot[playernumber()] == 2) //Preventing exploding tanks
		{
			Print(s:"Go to the marine command building to heal your tank (choose in menu)");
			terminate;
		}
            if (l_DisableFlash == 0){
			 f_CenterTip("Health Restocked!");
             fadeto(0, 0, 255, 0.5, 0.0);
             localambientsound("p/heal", 128);
			}		
			int health_up = CheckInventory("UnitUp_BodyEnhancement");
            if (l_Give > 0){        
				giveinventory("Health", 100 + 60*health_up);
				setactorproperty(0, APROP_SpawnHealth, 100 + 60*health_up);
				SetInventory("HUD_MaxHp", 1 + 3*health_up);
			}
            if (l_Give > 0 && Tech_IsDone(FP_TECH_GENLAB_HEALTH2)){
				// [Samu] Preventing Over-Health stat resets.
				if(hp < 140) giveinventory("Health", 140 + 60*health_up);
				setactorproperty(0, APROP_SpawnHealth, 140 + 60*health_up);
				SetInventory("HUD_MaxHp", 3 + 3*health_up);
			}            
            else if  (l_Give > 0 && Tech_IsDone(FP_TECH_GENLAB_HEALTH1)) {
				// [Samu] Preventing Over-Health stat resets.
				if(hp < 120) giveinventory("Health", 120 + 60*health_up);
				setactorproperty(0, APROP_SpawnHealth, 120 + 60*health_up);
				SetInventory("HUD_MaxHp", 2 + 3*health_up);
			}
            
            // check for genetics lab updates
            if (l_Give > 0)
            {
                if (Tech_IsDone(FP_TECH_GENLAB_SPEEDB))        setactorproperty(0, APROP_SPEED, 1.3);      // adrenaline
                if (Tech_IsDone(FP_TECH_GENLAB_ARMOR)){
					// [Samu] Preventing Armor Overrides.
					if(CheckInventory("BasicArmor") == 0) {takeInventory("Flag_BlueArmor", 1);}
					
					if(CheckInventory("BasicArmor") < 100 && !CheckInventory("Flag_BlueArmor")){
						giveinventory("GreenArmor", 1);
					}
					// steel plating
				}
                if (Tech_IsDone(FP_TECH_GENLAB_RESISB))        giveinventory("Upgrade_Resister", 1);       // resister unit
                if (Tech_IsDone(FP_TECH_GENLAB_REGENB))        giveinventory("Upgrade_Asorber", 1);        // asorber unit
            }
            
            delay(2);
            if (l_DisableFlash == 0)		fadeto(0, 0, 255, 0.0, 0.2);
    }
    
    // ammo stock pad
    if ((l_Type == 2 && Tech_IsDone(FP_TECH_ARMORY)) || (l_Type == 3))
    {
	show_color = CR_GREEN;
	show_stack = 14;
	// display what has been researched to the player
	if (Tech_IsDone(FP_TECH_ARMORY_ARMS2)) {
		RemindUpgrade(true, "+ Arms P2");
	}
	else if (Tech_IsDone(FP_TECH_ARMORY_ARMS1)) {
		RemindUpgrade(true, "+ Arms P1");
	}
	
	RemindUpgrade(Tech_IsDone(FP_TECH_ARMORY_BOOMRN), "+ Boomshot Rounds");
	RemindUpgrade(Tech_IsDone(FP_TECH_ARMORY_AMMOBP), "+ Ammo Backpack");
	RemindUpgrade(Tech_IsDone(FP_TECH_ARMORY_STIMPK), "+ 10 Stimpacks");
	RemindUpgrade(
		CheckInventory("P_Backpack"), "+ Personal Backpack");
	
		//[Samu] *sigh* It's time to refactor deez sheet.
			//Bullets
			if(l_Give > 0){
			 if (Tech_IsDone(FP_TECH_ARMORY_STIMPK))
				GiveInventory("Inventory_Stimpack", 10);
			 if (Tech_IsDone(FP_TECH_ARMORY_BOOMRN)) 
				giveinventory("Upgrade_Boomshot", 1);   // boomshot rounds
             if (Tech_IsDone(FP_TECH_ARMORY_AMMOBP)) 
				giveinventory("Backpack", 1);           // backpack
			
			 if(checkInventory("p_backpack")){ // Grants it some more ammo.
				ACS_NamedExecuteAlways("PersonalBP_Expand", 0);
			 }
			
			
			 GiveInventory("Clip", 9999);
			 GiveInventory("Shell", 9999);
			 
			 GiveInventory("RocketAmmo", 9999);
			 GiveInventory("GLauncher_Ammo", 9999);
			 GiveInventory("Flinger_Ammo", 9999);
			 
			 GiveInventory("Cell", 9999);
			
			 GiveInventory("Dualshot_Ammo", 9999);
			 GiveInventory("HeavyBullets", 9999);
			 Giveinventory("Gasoline", 9999);
			 
			 GiveInventory("Supplies_Health", 9999);
			 GiveInventory("Supplies_Ammo", 9999);
			 GiveInventory("Supplies_Health_Big", 9999);
			 GiveInventory("Supplies_Ammo_big", 9999);
			 GiveInventory("Shell", 9999);
			}
			
            if (l_DisableFlash == 0){
			 f_CenterTip("Ammo Restocked!");
             fadeto(0, 255, 0, 0.5, 0.0);
             localambientsound("p/deploy", 128);
			}
            
            delay(2);
            if (l_DisableFlash == 0)		fadeto(0, 255, 0, 0.0, 0.2);
    }
	
	//[Samu] A customized refresh-me-up.
	if(l_Type == -1){
		// Do Heal and Stock the player, but do not give the latest techs.
		
		if (l_Give > 0)        giveinventory("Health", 100);
        if (l_Give > 0 && Tech_IsDone(FP_TECH_GENLAB_HEALTH2)){
				giveinventory("Health", 140);
		}            
        else if  (l_Give > 0 && Tech_IsDone(FP_TECH_GENLAB_HEALTH1)) {
				giveinventory("Health", 120);
		}
		
		GiveInventory("Clip", 9999);
		GiveInventory("Shell", 9999);
			 
		GiveInventory("RocketAmmo", 9999);
		GiveInventory("GLauncher_Ammo", 9999);
		GiveInventory("Flinger_Ammo", 9999);
			 
		GiveInventory("Cell", 9999);
			
		GiveInventory("Dualshot_Ammo", 9999);
		GiveInventory("HeavyBullets", 9999);
		Giveinventory("Gasoline", 9999);
		
		GiveInventory("Supplies_Health", 9999);
		GiveInventory("Supplies_Ammo", 9999);
		GiveInventory("Supplies_Health_Big", 9999);
		GiveInventory("Supplies_Ammo_big", 9999);
		GiveInventory("Shell", 9999);
			 
		if (l_DisableFlash == 0){
			 f_CenterTip("You feel good as new!");
             fadeto(255, 255, 255, 0.5, 0.0);
			 localambientsound("p/heal", 128);
             localambientsound("p/deploy", 128);
			}
		delay(2);
		if (l_DisableFlash == 0)	fadeto(255, 255, 255, 0.0, 0.2);
	}
	
	//Ammo dispenser's stocker.
	// A nerfed version of the dispenser, 
	// just to prevent the full stocking on anywhere of the map.
	if(l_type == -2){
		// [Samu] Expansive re-stock upgrades for the players.
		int restock_up = CheckInventory("UnitUp_ExpansiveRestock");
		int extra_ammo = 2*restock_up;
		
		GiveInventory("Clip", 			10 * extra_ammo);
		GiveInventory("Shell", 			2 * extra_ammo);
			 
		GiveInventory("RocketAmmo", 	2 * extra_ammo);
		GiveInventory("GLauncher_Ammo", 2 * extra_ammo);
		GiveInventory("Flinger_Ammo", 	2 * extra_ammo);
			 
		GiveInventory("Cell", 			20 * extra_ammo);
		Giveinventory("Gasoline", 		10 * extra_ammo);
			
		GiveInventory("Dualshot_Ammo", 	15 * extra_ammo);
		GiveInventory("HeavyBullets",	40 * extra_ammo);
			 
			 /*[Samu] Oh fuck no... You're not gonna exploit this!
		GiveInventory("Supplies_Health", 9999);
		GiveInventory("Supplies_Ammo", 9999);
		GiveInventory("Supplies_Health_Big", 9999);
		GiveInventory("Supplies_Ammo_big", 9999);
			 */
			 
		if (l_DisableFlash == 0){
			 f_SmallTip ("Reloading...", cr_green, 0);
             fadeto(0, 255, 0, 0.3, 0.0);
			 localambientsound("g/reloading", 64);
			}
		delay(2);
		if (l_DisableFlash == 0)	fadeto(0, 255, 0, 0.0, 0.1);
	}
	// Health dispenser's stocker.
	// A nerfed version of the dispenser, 
	// just to prevent the full healing on anywhere of the map.
	if(l_type == -3){
		// [Samu] Expansive re-stock and armor repair upgrades for the players.
		int health_give = 10 + 15*CheckInventory("UnitUp_ExpansiveRestock");
		giveinventory("Health", health_give);
		
		if(CheckInventory("UnitUp_ArmorRepair")){
			
			int armor = Checkinventory("BasicArmor");
			int armor_max = 100 + 100*CheckInventory("Flag_BlueArmor");
			int armor_left = armor_max - armor;
			int armor_give = health_give;
			
			if(armor == 0){
				takeInventory("Flag_BlueArmor", 1);
				GiveInventory("GreenArmor", 1);
				f_SmallTip ("Green Armor Granted!", cr_green, 3);
			}
			else if (armor < armor_max){
				//log(s:"Armor to give: ", d:armor_give, s:", Armor left: ", d:armor_left);
				if(armor_left < armor_give) armor_give = armor_left;
				giveinventory("ArmorBonus", armor_give);
				f_SmallTip ("Repairing armor...", cr_green, 3);
			}
			
		}
		
		if (l_DisableFlash == 0){
			 f_SmallTip ("Healing...", cr_blue, 1);
             fadeto(0, 0, 255, 0.3, 0.0);
			 localambientsound("g/healing", 64);
			}
		delay(2);
		if (l_DisableFlash == 0)	fadeto(0, 0, 255, 0.0, 0.1);
	}
	
	// Some other tech reminders...
	show_stack = 20;
	show_color = CR_GOLD;
	if(Tech_IsDone(FP_TECH_REFINE_PUMP1)){
		RemindUpgrade(true, "+ C. Processing Phase 1");
	}else if (Tech_IsDone(FP_TECH_REFINE_PUMP2)){
		RemindUpgrade(true, "+ C. Processing Phase 2");
	}
}  

function void RemindUpgrade(bool condition, str string){
	if(condition){
		show_stack++;
		int offset = show_stack * 10.0;
		
		sethudsize(800, 600, s_ScreenSize[2]);
		setfont("CONFONT");
		hudmessage(s:string; HUDMSG_TYPEON, 2020 + show_stack, show_color, 600.1, 100.1 + offset, 2.0);
	}
}