
/**	
	The ImgButton (Image Button) 
	Is a button with a image that it handles an action.
*/
#include "samut_cgnsf_ibtns.acs"

//Basic Add Constructors
function int ImgButton_Add(int x, int y, int w, int h){
	int id = Component_Allocate(STCOMP_IBTN, x, y, w, h);
	if(id != -1){
		ImgButton_SetDefaultProps(id);
	}
	
	return id;
}

function int ImgButton_AddGrid(int grid, int row, int col, int w, int h){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	
	int id = Component_Allocate(STCOMP_IBTN, x, y, w, h);
	if(id != -1){
		ImgButton_SetDefaultProps(id);
	}
	return id;
}

function int ImgButton_AddCard(int grid, int cell, int w, int h){
	int x = Card_GetX(grid, cell);
	int y = Card_GetY(grid, cell);
	
	int id = Component_Allocate(STCOMP_IBTN, x, y, w, h);
	if(id != -1){
		ImgButton_SetDefaultProps(id);
	}
	return id;
}

//Duplicate constructors.
//This will make another component with the same properties saved with Component_SaveProps function.

//A time saver if you dont like to re-define the component again and again.
function int ImgButton_AddDup(int x, int y, int w, int h){
	int id = Component_Allocate(STCOMP_IBTN, x, y, w, h);
	if(id != -1){
		Component_LoadProps(id, STCOMP_IBTN, getImgButtonRect(id));
	}
	
	return id;
}

function int ImgButton_AddDupGrid(int grid, int row, int col, int w, int h){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	
	int id = Component_Allocate(STCOMP_IBTN, x, y, w, h);
	if(id != -1){
		Component_LoadProps(id, STCOMP_IBTN, getImgButtonRect(id));
		SetImgButtonPosition(id, x, y);
	}
	return id;
}

function int ImgButton_AddDupCard(int grid, int cell, int w, int h){
	int x = Card_GetX(grid, cell);
	int y = Card_GetY(grid, cell);
	
	int id = Component_Allocate(STCOMP_IBTN, x, y, w, h);
	if(id != -1){
		Component_LoadProps(id, STCOMP_IBTN, getImgButtonRect(id));
		SetImgButtonPosition(id, x, y);
	}
	return id;
}

function void ImgButton_SetPosToGridOff(int i, int grid, int row, int col, int offx, int offy){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	SetImgButtonPosition(i, x + offx, y + offy);
}

function void ImgButton_SetPosToCardOff(int i, int card, int cell, int offx, int offy){
	int x = Card_GetX(card, cell);
	int y = Card_GetY(card, cell);
	
	SetImgButtonPosition(i, x + offx, y + offy);
}

function void ImgButton_SetPosToGrid(int i, int grid, int row, int col){
	int x = Grid_GetX(grid, row, col);
	int y = Grid_GetY(grid, row, col);
	SetImgButtonPosition(i, x, y);
}

function void ImgButton_SetPosToCard(int i, int card, int cell){
	int x = Card_GetX(card, cell);
	int y = Card_GetY(card, cell);
	
	SetImgButtonPosition(i, x, y);
}

function int ImgButton_Add_P(int coffx, int coffy, int w, int h, int align, int parent){
	int posX = 0;
	int posY = 0;
	
	//print(s:"Parent Center ", f:RectCenterX(parent));
	
	switch(align){
		Case ST_COMPALIGN_NORTH:
			posX = coffx + RectCenterX(parent) - fixedDiv(w, 2.0);
			posY = coffy + RectY1(parent) + 4.0;
		break;
		Case ST_COMPALIGN_South:
			posX = coffx + RectCenterX(parent) - fixedDiv(w, 2.0);
			posY = -coffy + RectY2(parent) - h - 4.0;
		break;
		Case ST_COMPALIGN_East:
			posX = coffx + RectX1(parent) + 4.0;
			posY = coffy + RectCenterY(parent) - fixedDiv(h, 2.0);
		break;
		Case ST_COMPALIGN_West:
			posX = -coffx + RectX2(parent) - w - 4.0;
			posY = coffy + RectCenterY(parent) - fixedDiv(h, 2.0);
		break;

		Case ST_COMPALIGN_Center:
			posX = coffx + RectCenterX(parent) - fixedDiv(w, 2.0);
			posY = coffy + RectCenterY(parent) - fixedDiv(h, 2.0);
		break;
		
		default: // NorthEast
			posX = coffx + RectX1(parent);
			posY = coffy + RectY1(parent);
		break;
	}

	int id = Component_Allocate(STCOMP_IBTN, posX, posY, w, h);
	if(id != -1){
		ImgButton_SetDefaultProps(id);
		setImgButtonParent(id, parent);
	}
	//print(d:i, s:". Rect added to image buttons.");
	
	return id;
}

function void UpdateImgButton(int bid, int condit){
	if(getImgButtonParent(bid) > -1){
		if(getPromptTag() == getImgButtonTag(bid))
			setImgButtonShow(bid, condit);
	}
}

function void AdjustImgButton_P(int bid,int offx, int offy,
								int align, int parent){
	int posX = 0;
	int posY = 0;
	
	int w = getImgButtonWidth(bid);
	int h = getImgButtonHeight(bid);
	
	//print(s:"Parent Center", f:RectY2(parent));
	//print(f:getImgButtonX1(bid));
	
	switch(align){
		Case ST_COMPALIGN_NORTH:
			posX = offx + RectCenterX(parent) - fixedDiv(w, 2.0);
			posY = offy + RectY1(parent) + 4.0;
		break;
		Case ST_COMPALIGN_South:
			posX = offx + RectCenterX(parent) - fixedDiv(w, 2.0);
			posY = -offy + RectY2(parent) - h - 4.0;
		break;
		Case ST_COMPALIGN_East:
			posX = offx + RectX1(parent) + 4.0;
			posY = offy + RectCenterY(parent) - fixedDiv(h, 2.0);
		break;
		Case ST_COMPALIGN_West:
			posX = -offx + RectX2(parent) - w - 4.0;
			posY = offy + RectCenterY(parent) - fixedDiv(h, 2.0);
		break;

		Case ST_COMPALIGN_Center:
			posX = offx + RectCenterX(parent) - fixedDiv(w, 2.0);
			posY = offy + RectCenterY(parent) - fixedDiv(h, 2.0);
		break;
		
		default: // NorthEast
			posX = offx + RectX1(parent);
			posY = offy + RectY1(parent);
		break;
	}

	setImgButtonPosition(bid, posX, posY);
	//print(f:getImgButtonX1(bid));
}

function void ImgButton_SetDefaultProps(int i){
		setImgButtonImage(i,"");
		setImgButtonHoverImage(i,"");
		setImgButtonShow(i, false);
		setImgButtonExecute(i, 0);	
		setImgButtonArgs(i, 0,0,0);	
		setImgButtonHudid(i, ST_HID_IBTN + i);
		setImgButtonParent(i, -1);
		setImgButtonExeHover(i, 0);	
		setImgButtonArgsHover(i, 0,0,0);	
		//setImgButtonOffsets(i, 0.0, 0.0);
}

function void ImgButton_SetProperties(int i, 
	str img, str desc, int enable, int exe){
		setImgButtonImage(i,img);
			//log(s:GetImgButtonImage(i));
		setImgButtonShow(i, enable);
		setImgButtonExecute(i, exe);	
}

function void ImgButtonProp_Parse(int i, str name,str value){

	//Parsea todos los nombres de propiedades de un componente.
	if(StrIEquals(name,  "image")){
		setImgButtonImage(i,      Prop_Value(value));
		return;
	}if(StrIEquals(name, "hoverimage")){
		setImgButtonHoverImage(i, Prop_Value(value));
		return;
	}if(StrIEquals(name, "tag")){
		setImgButtonTag(i,        Prop_Value(value));
		return;
	}if(StrIEquals(name, "execute")){
		setImgButtonExecute(i,    Prop_Value(value));
		return;
	}if(StrIEquals(name, "exe_a1")){
		setImgButtonArgs(i, 
			Prop_Value(value),
			getImgButtonExeArg2(i),
			getImgButtonExeArg3(i));
		return;
	}if(StrIEquals(name, "exe_a2")){
		setImgButtonArgs(i, 
			getImgButtonExeArg1(i),
			Prop_Value(value),
			getImgButtonExeArg3(i));
		return;
	}if(StrIEquals(name, "exe_a3")){
		setImgButtonArgs(i, 
			getImgButtonExeArg1(i),
			getImgButtonExeArg2(i),
			Prop_Value(value));
		return;
	}
}

function void SetImgButtonProps(int id, str props){
	Parser_Read(props);
	
	for(int j = 0; j < propb_top; j++){
		ImgButtonProp_Parse(id, propb[j][0], propb[j][1]);
	}
	
}
